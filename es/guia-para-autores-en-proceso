---
title: Guía para autores y traductores
layout: blank
redirect_from:
 - /new-lesson-workflow
 - /author-guidelines
skip_validation: true
---

# Guía para autores

<img src="{{site.baseurl}}/images/author-sm.png" class="garnish rounded float-left" />
<h2 class="noclear">Paso 1: <a href="#paso-1-proponer-o-traducir-tutorial">Proponer o traducir un tutorial nuevo</a></h2>
<h2 class="noclear">Paso 2: <a href="#paso-2-escribir-y-dar-formato-a-un-nuevo-tutorial">Escribir y dar formato a un nuevo tutorial</a></h2>
<h2 class="noclear">Paso 3: <a href="#paso-3-enviar-una-traduccion-o-tutorial-nuevo">Enviar un nuevo tutorial o traducción</a></h2>  


Estas directrices han sido desarrolladas para ayudar a entender el proceso de creación de un tutorial para *Programming Historian*. Incluyen detalles prácticos y filosóficos sobre el proceso de redacción del tutorial, así como indicaciones sobre el flujo de trabajo y del proceso de revisión de pares. Si en algún momento no está claro, por favor envíe un correo electrónico al editor jefe {% include managing-editor.html lang=page.lang %}.

## Paso 1: Proponer of traducir un nuevo tutorial

<div class="alert alert-success">
Recibimos tutoriales pertinentes a las humanidades, que se centren en cualquier nivel de aptitud técnica y experiencia, que se centren en un problema o proceso, que puedan ser sostenibles a largo plazo y que estén dirigidos a una audiencia global.

El alcance y la longitud del tutorial deben ser adecuados a la complejidad de la tarea. Los tutoriales no deben exceder las 8.000 palabras (incluido el código). Las lecciones más cortas son bienvenidas. Es posible que las lecciones más largas deban dividirse en múltiples tutoriales.

</div>

Si tienes una idea para una nueva lección, completa una el [formato de propuestas](/assets/forms/Lesson.Query.Form.txt) y envíalo a {% include managing-editor.html lang=page.lang %}.

Puedes darte una idea de lo que publicamos revisando nuestros [tutoriales publicados]({{site.baseurl}}/es/lecciones), leyendo nuestra [guía para revisores]({{site.baseurl}}/es/guia-para-revisores) u ojeando [los tutoriales en desarrollo](https://github.com/programminghistorian/ph-submissions/tree/gh-pages/es/lecciones).

Si su propuesta es aceptada, un editor creará una página de "Propuesta" en nuestro [sitio de envíos](https://github.com/programminghistorian/ph-submissions/issues) con el título de la lección y los resultados de aprendizaje propuestos. Esto sirve para señalar el trabajo en curso. Para asegurar la publicación oportuna, los autores deben presentar su proyecto de artículo en un plazo de 90 días. 

Durante este período de 90 días, su punto de contacto será el jefe de redacción o un editor delegado según pa prerrogativa del jefe de redacción.

## Paso 2: Escribir y formatear el tutorial 
Esta guía de estilo establece un conjunto de normas para que los autores las utilicen al crear o traducir las lecciones en español para *Programming Historian*. Al usarla, nos ayudas a asegurar que el contenido sea consistente y accesible.

Se presenta en tres secciones que deben ser leídas antes y después de la escritura:

* A. Estilo y audiencia
* B. Directrices de estilo específicas
* C. Guía de formato

## A. Estilo y audiencia
Esta primera sección se ocupa de cuestiones de estilo generales que te ayudarán a tomar decisiones que satisfagan las necesidades de nuestra audiencia y editores. Incluimos información básica sobre el estilo y el tono, el acceso abierto y los valores del código abierto, información sobre la escritura para una audiencia global, la escritura sostenible y la toma de decisiones inteligentes sobre los datos utilizados en las lecciones. Lea esta sección cuando planifique su lección. Léala de nuevo antes de enviarla para asegurarse de que el tutorial cumple con estos requisitos.

### Lenguaje y estilo
*	Los tutoriales no deben exceder las 8.000 palabras (incluyendo el código).
*	Mantén un tono formal pero accesible.
*	Hable con su lector en segunda persona (usted).
*	Adopte una versión ampliamente utilizado del español (REVISAR).
*	El escrito es un "tutorial" o una "lección" y no un "artículo".

### Código abierto, acceso abierto
*Programming Historian* está comprometido con los valores del código abierto. Todas las lecciones deben usar lenguajes de programación y software de código abierto siempre que sea posible. Esta política tiene por objeto reducir al mínimo los costos para todas las partes y permitir el mayor nivel de participación posible.

Una vez aceptada la lección, usted acepta publicar su lección bajo una licenicia Creative Commons"[CC-BY](https://creativecommons.org/licenses/by/4.0/deed.es)".

### Escriba para una audiencia global
Los lectores de *Programming Historian* viven en todo el mundo. Los autores pueden y deben tomar medidas para escribir su lección de forma accesible para el mayor número de personas posible. Siga estas directrices de cara a una audiencia global:

*	Escriba para alguien que no viva en su país o que no comparta sus creencias.

*	**Términos técnicos:** siempre deben estar vinculados a [Wikipedia](https://es.wikipedia.org/) o a un diccionario fiable o a un sitio web sostenible en primera instancia. Un término técnico es cualquier palabra que una persona en la calle puede no conocer o entender.
*	**Referencias culturales**: las menciones A personas, organizaciones o detalles históricos deben acompañarse siempre con información contextual. No hay que suponer ningún conocimiento previo, incluso de referencias culturales ampliamente conocidas (por ejemplo, [the Beatles](https://en.wikipedia.org/wiki/The_Beatles)). Use términos genéricos en lugar de marcas comerciales (pañuelo en lugar de Kleenex) Los enlaces a [Wikipedia](https://es.wikipedia.org/) deben ser usados libremente. 
*	**Modismos**: Evite bromas, juegos de palabras, expresiones idiomáticas, sarcasmo, emojis, jerga, términos exclusivos de su dialecto, o lenguaje que sea más difícil de lo necesario.
*	**Geografía**: cuando haga referencia a los lugares, sea específico. ¿"Sudoeste" significa Valencia? ¿Canadá? ¿Africa? Escriba siempre el nombre completo del área la primera vez que la use.
*	**Multi-idioma**: al elegir los métodos o instrumentos, haga sus elecciones teniendo en cuenta a los lectores multilingües, especialmente en el caso de los métodos de análisis textual, que pueden no ser compatibles con otros conjuntos de caracteres o que sólo pueden proporcionar resultados intelectualmente sólidos cuando se utilizan en textos en inglés. Cuando sea posible, elija enfoques que tengan documentación multilingüe, o proporcione referencias multilingües para su lectura posterior. Esto ayudará a nuestros traductores.
*	**Lenguaje racial y étnico**: use la terminología racial cuidadosamente y con especificidad. Los términos históricos que ya no se utilizan deben usarse sólo en su contexto histórico y sólo cuando sea necesario. Usar los términos raciales como adjetivos y no como sustantivos: personas blancas en lugar de "blancos", una mujer asiática en lugar de "un asiático". Tenga en cuenta que los términos pueden entenderse de manera diferente en los distintos países y que lo que ha aprendido a ser correcto o sensible puede ser culturalmente específico de su país (por ejemplo, no todas las personas de ascendencia africana son "afroamericanos". Algunos de ellos son africanos, o negros británicos, o caribeños, etc.). Asimismo, los lectores del Reino Unido entenderán el término "asiático" (India, Pakistán, Bangladesh) de manera diferente a los de América del Norte (por ejemplo, China, Japón, Vietnam, Tailandia).
*	**Representaciones visualess**: elija las fuentes primarias, imágenes, figuras y capturas de pantalla, teniendo en cuenta cómo se presentarán a una audiencia global.

### Escritura sostenible
*Programming Historian* publica lecciones para el largo plazo. Por favor, siga estas directrices de sostenibilidad cuando escriba:

 *	**Tan general como sea posible, pero no más**: concéntrese en las metodologías y generalidades, no en los programas informáticos/interfaces específicos (por ejemplo, evite decir a los usuarios que "hagan clic en el botón X", que puede ser diferente en versiones futuras).
 * **Reducir la dependencia de elementos insostenibles**: utilice capturas de pantalla con moderación y con un propósito. Las interfaces cambian con frecuencia y los futuros lectores pueden confundirse. Elija los enlaces externos teniendo en cuenta el futuro. ¿Cambia a menudo el sitio al que se enlaza? ¿Existirá dentro de diez años?
 * **Especifique las versiones si son importantes**: sea claro acerca de los detalles específicos de las versiones que los lectores necesitarán saber para poder seguir su lección. Por ejemplo, ¿necesita Python v.2, o cualquier versión estará bien?
 * **Refiérase a la documentación**: dirija a los lectores a una documentación fiable cuando sea posible. Proporcione una guía general sobre cómo encontrar la documentación si es probable que haya nuevas versiones en el futuro.
 * **Copias de datos**: todos los datos utilizados en las lecciones deben ser publicados con la lección en los servidores de *Programming Historian* junto con su lección. Asegúrese de tener el derecho legal de publicar una copia de cualquier dato utilizado. Los archivos de datos deben utilizar formatos abiertos.

Los autores deben consultar nuestra [política de retirada de lecciones]({{site.baseurl}}/es/politica-retirada-lecciones) para información sobre cómo el equipo editorial maneja las lecciones que se han vuelto obsoletas.

## B. Pautas específicas de escritura
En esta segunda sección se tratan cuestiones más específicas del estilo de escritura, como qué palabras utilizar, o cómo usar la puntuación, o qué formato utilizar para las fechas o los números. Lea esta sección antes y después de escribir su borrador.

### Fechas y hora
 *	Para siglos utilice siglo dieciocho y no siglo XVIII. Evite frases centradas en lo nacional, como "largo siglo XVIII", que tienen un significado específico para los especialistas británicos del siglo XVIII, pero para nadie más.
 *	Para décadas escriba "los años cincuenta" o "los cincuenta" (no "los años 50's" o "la década de los 50s").
 *	Comprima las secuencias de fecha así; 1816-17, 1856-9, 1854-64.
 *	Para fechas escritas en forma numérica utilice el formato DD-MM-AA, which conforms to the standard ISO 8601:2004. This avoids ambiguity.
 *	Utilice BCE/CE not BC/AD for dates (eg 325BCE). [Asi aparece en la RAE: a. de J. C., a. de C., a. J. C. o a. C. (‘antes de (Jesu)Cristo’) y d. de J. C., d. de C., d. J. C. o d. C. (‘después de (Jesu)Cristo’): 211 a. C., 123 d. C. ]
 *	1am, 6:30pm. Not 10 o’clock. [Algunos lineamientos de la RAE: La hora puede expresarse en letras o en números. El modelo de doce horas es el más utilizado cuando la hora se escribe con letras, y el más común en textos literarios y periodísticos. También puede usarse este sistema si se opta por escribir la hora con cifras; pero, en ese caso, : No es recomendable mezclar letras y números; así, es preferible escribir las diez de la noche que las 10 de la noche. para evitar ambigüedades, deben emplearse, tras los números, las abreviaturas a. m. y p.m.]

### Números [revisar lineamientos de la RAE y de autoridades de la lengua en Latinoamerica]
 *	Spell out from one to nine; integers above 10.
 *	Use a consistent format if the boundary outlined above is crossed within a single sentence (five apples and one hundred oranges; 5 apples and 110 oranges).
 *	Use commas (not periods/full stops) between groups of three digits in large numbers (32,904 not 32904). Exceptions: page numbers, addresses, in quotation, etc.
 *	Use numerals for versions (version 5 or v.5) or actual values (eg, 5%, 7″, $6.00).
 *	Always use the symbol % with numerals rather than the spelled-out word (percent), and make sure it is closed up to number: 0.05%.
 *	Use [LaTeX formatting for mathematical formulae](https://davidhamann.de/2017/06/12/latex-cheat-sheet/).
 *	For units of measure, use metric or imperial but be consistent.

### Encabezados
Los encabezados no deben contener un código de fuente o un formato de estilo como negrita, cursiva o código de fuente.
Los encabezados siempre deben preceder inmediatamente al texto del cuerpo. No ponga después de un encabezado ¿una amonestación? u otro encabezamiento sin alguna forma de texto introductorio o descriptivo.


### Listas
Típicamente, usamos listas numeradas y listas con viñetas. Los elementos de la lista comienzan con mayúscula. Los elementos de la lista deben ser tratados como elementos separados y no deben ser encadenados con puntuación o conjunciones. 

NO tiene estilo:

* Acá hay un ítem y
* acá hay otro ítem; y
* acá hay un ítem final.

Estilo:

* Acá hay un ítem
* Acá hay otro ítem
* Acá está el último ítem

Or:

1. Here is an item
2. Here is another item
3. Here is the final item

### Puntuación
 *	**Abreviaturas**: [revisar lineamientos de la RAE: https://www.rae.es/dpd/abreviatura] spell out all words on first mention. European Union (EU) and then EU. Do not use full points / periods or spaces between initials: BBC, PhD, mph, 4am, etc.
 *	??? **Ampersand**: generally speaking, do not use an ampersand in place of the word "and" unless referring to a company or publication that uses it: P&O, *Past & Present*.
 *	**Apóstrofe**: [No recuerdo que en español lo usemos--quitar] use the possessive 's after singular words or names that end in s – St James's, Jones's, mistress's; use it after plurals that do not end in s: children's, people’s, media's.
 *	**Brackets / Parentheses**: it is better to use commas or dashes. Use round brackets to introduce explanatory material into a direct quote, eg: He said: "When finished it (the tunnel) will revolutionise travel" or "She said adiós (goodbye)". Place a full stop / period outside a closing bracket if the material inside is not a sentence (like this). (But an independent sentence takes the full stop before the closing bracket.)
 *	**Colon**: use to introduce lists, tabulations, texts, as in:
    *	The committee recommends: extending licensing hours to midnight; allowing children on licensed premises; relaxing planning controls on new public houses.
    *	Use after the name of a speaker for a whole quoted sentence: Mr James Sherwood, chairman of Sealink, said: "We have..."
    *	Lowercase the first letter after a colon: this is how we do it.
 *	**Comma**: serial comma (this, that, and the other).
 *	**Dash**: a useful device to use instead of commas, but not more than one pair per sentence.
 *	**Ellipsis**: three periods separated from the preceding and following words by a space ( ... ). Use to condense a direct quote (thus the quote "the people sitting in this meeting room deserve a better deal" becomes "the people ... deserve a better deal").
 *	**Exclamation Mark**: use only at the end of a direct quote when it is clear that the remark is exclamatory, eg "I hate intolerance!"
 *	**Full Stop / Period**: use frequently. Sentences should be short, crisp, straightforward. But do not put full stops between initials, after status title (Mx, Dr) or between abbreviations (EU).
 *	**Hyphen**: use to avoid ambiguity or to form a single idea from two or more words:
    *	Fractions: two-thirds.
    *	Most words that begin with anti, non and neo.
    *	A sum followed by the word worth - £10 million-worth of exports.
    *	Some titles (director-general, secretary-general, but Attorney General, general secretary etc). The rule is to adopt the usage of the authority which created it
    *	Avoiding ambiguity (little-used car ... little used car).
    *	Compass quarters (south-west, north-east).
 *	**Quotation Marks**: use straight (not curly) quotation marks for direct quotes. Use either single or double quotation marks but be consistent.

### Capitalisation
The guideline is to use them sparingly in the running prose. Specific rules:

*	**Title Case**: headings and book titles should use title case: "Preparing the Data for Analysis"; *The Pride and the Passion*, etc.
*	**Always Capitalized**:
    *	**Proper Names**: William J. Turkel – unless the person choses to spell their name otherwise (eg "bell hooks").
    *	**Artistic, Cultural, Government Organizations, etc**: Museum of the Moving Image, Anne Frank House, Home Office, Agency for Global Media, United Nations.
    *	**Holidays and Festivals**: Diwali, Hanukkah, Eid-Ul-Adha, Ramadan.
*	**Sometimes or Partially Capitalized**:
    *	**Places**: capitals for countries, regions, recognisable areas (eg, the Middle East, Senegal). Lower case for points of the compass, except where they are used as part of a place name (to reach the North Pole, head north). Further examples include: north-east Kenya, south Brazil, the west, western Canada, the far east, south-east Asia, Central America, Latin America.
    *	**Historic Events**: first world war, second world war; Crimean/Boer/Vietnam/Gulf war; hundred years war.
    *	**Religion**: Upper case for Anglican, Baptist, Buddhist, Catholic, Christian, Hindu, Methodist, Muslim, Protestant, Roman Catholic, Sikh, but lower for evangelicals, charismatics, atheists.
    *	**Holy Books (select)**:
        *	**Bible**: Capitalise if referring to Old or New Testament.
        *	**Buddhist**: sutras (sermons) and abhidhamma (analysis and interpretation). For Tibetan Buddhism there are also tantric texts and the Tibetan Book of the Dead.
        *	**Hindu**: the Śruti texts: Vedas, Samhitas, Brahmanas, Aranyakas, Upanishads; the Vedāngas, Hindu epics, Sutras, Shastras, philosophical texts, the Puranas, the Kāvya, the Bhasyas, many Nibandhas.
        *	**Judaism**: the Tanakh (Torah, Nevi'im, Ketuvim), Talmud (Mishnah, Gemara)
        *	**Qu'ran**: Capitalise. Texts include the Hadith, the Tawrat (Torah), Zabur (possibly Psalms), Injil (1.2 billion).
        *	**Sikh**: Adi Granth (commonly called the Guru Granth Sahib), the Dasam Granth, the Varan Bhai Gurdas, the texts of Bhai Nand Lal.
    *	**Jobs**: Capitalise the title when used with the name – President Macron but not as a description – Emmanuel Macron, president of France. The Pope and the Queen have capital letters.
    *	**Organisations and Institutions**: the Government (cap in all references), the Cabinet (cap in all references), the Church of Ireland ("the church"), the Department of Education and Science ("the department"), Western University ("the university"), the Court of Appeal ("the appeal court" or "the court").
    *	**Universities and Colleges**: Capitals for institution, lower case for departments ("Australian National University department of medieval history").
    *	**Religious Institutions, Hospitals and Schools**: cap up the proper or place name, lower case the rest eg Nurture Hillandale rehabilitation hospital, Vernon county primary school, Ali Pasha’s mosque.
*	**Always Lowercase**:
    *	**Committees, Reports and Inquiries**: committee on climate change, trade and industry committee, royal commission on electoral reform
    *	**Agencies, Commissions, Public Bodies, Quangos**: benefits agency, crown prosecution service, customs and excise, parole board
    *	**Seasons**: spring, summer, autumn/fall, winter.
    *	**Currencies**: euro, franc, mark, sterling, dong etc

### References
*	Links rather than endnotes may be appropriate in most cases.
*	Ensure linked phrases are semantically meaningful. Do not link terms that are meaningful only to sighted users such as "click here".
*	All traditionally published and academic literature should be end-noted rather than linked.
*	If you are writing an "analysis" tutorial, you must refer to published scholarly literature.
*	Endnote superscripts should be outside the final punctuation like this.² Not inside like this².
*	Use the "Notes and Bibliography" system found in the [*The Chicago Manual of Style*, 17th Edition](https://www.chicagomanualofstyle.org/tools_citationguide/citation-guide-1.html) for endnotes.
*	On first mention of a published work, include author name (including first/given name). For example, "You can find more information in *The Elements of Typographic Style* by Robert Bringhurst," or "For more information, consult Robert Bringhurt’s *The Elements of Typographic Style*." On subsequent references, just use the book title. Author’s names can be shortened to surname only on subsequent use.
*	Endnotes should not just contain a URL.
    *	(Correct): Grove, John. "Calhoun and Conservative Reform." *American Political Thought* 4, no. 2 (2015): 203–27. https://doi.org/10.1086/680389.
    *	(Incorrect): https://doi.org/10.1086/680389


### Challenging Words Explained

 *	**Collective Nouns** (group, family, cabinet, etc) take singular or plural verb according to meaning: the family was shocked, the family were sitting down, scratching their heads.
 *	**Less or Fewer?** Less means less in quantity, (less money); fewer means smaller in number, (fewer coins).
 *	**Over or More Than?** Over and under answer the question "how much?"; more than and fewer than answer the question "how many?": she is over 18, there were more than 20,000 at the game.
 *	**That or Which?** that defines, which informs: this is the house that Jack built, but this house, which Jack built, is now falling down.

## C. Formatting Guidelines
This final section covers matters of formatting for submission. Read this section before and after writing your draft. If you get any of these elements wrong, you will be able to correct them when we post a live preview of your lesson at the start of the peer review process.

### Write in Markdown
All lessons must be written in [Markdown](https://en.wikipedia.org/wiki/Markdown). A template for writing your lessons has been provided.

* [Download the English Language Lesson template (.md)]({{site.baseurl}}/en/lesson-template.md).

Markdown is a mark-up language that is best created with a text editor. MS Word and Open Office are NOT text editors and should be avoided. We recommend [Atom](https://atom.io/), [TextWrangler](https://www.barebones.com/products/textwrangler/), [TextEdit](https://en.wikipedia.org/wiki/TextEdit), [MacDown](https://macdown.uranusjr.com/) or [Notepad++](https://notepad-plus-plus.org/download).
For a gentle introduction to Markdown formatting see [Getting Started with Markdown]({{site.baseurl}}/en/lessons/getting-started-with-markdown), or the concise reference [GitHub Guide to Markdown](https://guides.github.com/features/mastering-markdown/).

Your lesson should be saved in .md format. Your lesson filename becomes part of the lesson URL. Therefore, it should be named according to the following rules:

 *	A short, lowercase, descriptive name that gives a clear indication of the lesson contents (eg. getting-started-with-markdown.md).
 *	Do not use spaces or underscores in the filename; use hyphens instead.
 *	Use a keyword-rich filename that includes key technologies or methods (eg, Python or Sentiment Analysis).

### Bold, Italics, and Underline
To ensure consistency across lessons, adhere to the following text formatting guidelines:

#### Bold
 *	Bold is not used except in exceptional circumstances.
 *	Bold is formatted using **\*\*double asterisks\*\***.

#### Italics
 *	Use italics for book titles, films, TV programmes, paintings, songs, albums, and websites.
 *	Never use italics for business names (the *Facebook* website is owned by Facebook).
 *	Do not use italics in headlines, even if referring to a book title.
 *	Italics are formatted using *\*single asterisks\**.

#### Underline
 *	Underline is not used.


### Alerts and Warnings
If you want to include an aside or a warning to readers, you can set it apart from the main text:

```
<div class="alert alert-warning">
 Be sure that you follow directions carefully!
</div>
```

### Figures and Images
Images can help readers understand your lesson steps, but should not be used for decoration. If you wish to use images in your lesson, label them sequentially LESSON-NAME1.jpg, LESSON-NAME2.jpg, etc. Refer to them in the text as "Figure 1", "Figure 2", and so on. All figures must come with a concise figure caption and endnotes where appropriate. You must have the legal right to post any images.

Use web-friendly file formats such as .png or .jpg and reduce large images to a maximum of 840px on the longest side. This is important for readers in countries with slower internet speeds.

Images should be saved in a folder with the same name as your lesson .md file. The editor assigned to your lesson can assist you in uploading your images when you submit.

To insert an image in your text, use the following format:

{% raw %}
``` markdown
{% include figure.html filename="IMAGE-FILENAME" caption="YOUR CAPTION USING \"ESCAPED\" QUOTES" %}
```
{% endraw %}

Note that internal quotation marks in your caption must be escaped with a backslash, as in the example above. Images may not appear in previews of your lesson, but your editor will ensure they render properly when the lesson is published.

### Code Examples
Lines of code should be formatted to distinguish them clearly from prose:

 *	Lines of code should be maximum 80 characters
 *	Multi-line code blocks should be enclosed in three \`\`\`back-ticks\`\`\`.
 *	Inline code (rarely used) can be enclosed in single \`backticks\`.


```
They will look like this
```
` and this ` respectively.

--
Follow best practice in writing your code:

*	**Variable and Function Names**: variable names should be nouns (eg "counter") and function names should be verbs (eg "createFile"). Choose names that are concise and meaningful. You may use [snake_case](https://en.wikipedia.org/wiki/Snake_case) or [camelCase](https://en.wikipedia.org/wiki/Camel_case), but be consistent.
*	**User Commands**: when writing about text you want the reader to replace with their own information, use FULL CAPS and enclose by ` backticks ` (eg, \`USERNAME HERE\`).
*	**Filenames**: filenames that you ask your reader to create or use should be enclosed in `backticks` when mentioned in the text and should include their file extension. Choose names that are concise and meaningful. You may use [snake_case](https://en.wikipedia.org/wiki/Snake_case) or [camelCase](https://en.wikipedia.org/wiki/Camel_case), but be consistent (eg, `data.txt`, `cleanData.py` etc).
*	**Reserved Words**: words that are part of a programming language should always be formatted as `code` using `back-ticks` in the running prose. A list of reserved words in common programming languages include:

#### JavaScript:

`abstract`, `arguments`, `await`, `Boolean`, `break`, `byte`, `case`, `catch`, `char`, `class`, `const`, `continue`, `debugger`, `default`, `delete`, `do`, `double`, `else`, `enum`, `eval`, `export`, `extends`, `false`, `final`, `finally`, `float`, `for`, `function`, `goto`, `if`, `implements`, `import`, `in`, `instanceof`, `int`, `interface`, `let`, `long`, `native`, `new`, `null`, `package`, `private`, `protected`, `public`, `return`, `short`, `static`, `super`, `switch`, `synchronized`, `this`, `throw`, `throws`, `transient`, `true`, `try`, `typeof`, `var`, `void`, `volatile`, `while`, `with`, `yield`.

#### Python 2:
`and`, `as`, `assert`, `break`, `class`, `continue`, `def`, `del`, `elif`, `else`, `except`, `exec`, `finally`, `for`, `from`, `global`, `if`, `import`, `in`, `is`, `lambda`, `not`, `or`, `pass`, `print`, `raise`, `return`, `try`, `while`, `with`, `yield`.

#### Python 3:
`and`, `as`, `assert`, `break`, `class`, `continue`, `def`, `del`, `elif`, `else`, `except`, `False`, `finally`, `for`, `from`, `global`, `if`, `import`, `in`, `is`, `lambda`, `nonlocal`, `None`, `not`, `or`, `pass`, `raise`, `return`, `True`, `try`, `while`, `with`, `yield`.

#### R:
`break`, `else`, `for`, `FALSE`, `function`, `if`, `in`, `Inf`, `NA`, `NA_character_`, `NA_complex_`, `NA_integer_`, `NA_real_`, `NaN`, `next`, `NULL`, `repeat`, `TRUE`, `while`.


## Step 3: Submitting a New Lesson

Double-check that your lesson file has been prepared to the above specifications. Once you are satisfied, we strongly recommend that you ask at least two people to try your tutorial and provide feedback. This will help you make improvements that mean our peer reviewers can focus on helping you produce the strongest possible lesson.

You are ready to submit the lesson for peer review. Submissions are made to our peer review site on [Github](https://github.com/programminghistorian/ph-submissions/tree/gh-pages/lessons).

1. **Getting Access**: create a [free Github account](https://github.com/join). Email your Github username to your editor who will give you upload access to our submission site. Let the editor know the file name of your lesson and if you have any images or data files accompanying your tutorial.
3. **Uploading your Lesson**: once your editor confirms you have been granted access to the site, upload your lesson to the [lessons folder](https://github.com/programminghistorian/ph-submissions/tree/gh-pages/lessons). If you need help, see [GitHub's instructions](https://help.github.com/articles/adding-a-file-to-a-repository/).
4. **Uploading Images**: if your lesson includes images, make sure all of the files are named according to the naming conventions specified above. Your editor will have created a folder for you to upload your images in the  [images directory](https://github.com/programminghistorian/ph-submissions/tree/gh-pages/images). This folder should have the same name as your lesson filename. Upload your images to this folder. If you don't see it, please contact your editor and wait for instructions.
5. **Uploading Data**: if your lesson includes data files, they should similarly be uploaded to a similarly named folder in the [assets directory](https://github.com/programminghistorian/ph-submissions/tree/gh-pages/assets).
6. **Email your editor** to let them know that you have uploaded your files.


## The Peer Review Process

Your editor will check that your files have been uploaded and formatted properly. At this stage you will be sent a preview link where any formatting errors will be evident and you can fix them.

The peer review will be recorded on a Github "[ticket](https://github.com/programminghistorian/ph-submissions/issues)", which acts like an open message board discussion. Be aware that our peer review happens in public and remains publicly available as a permanent record of peer review. If you have concerns or would like to request a closed review, contact your assigned editor.

The peer review process normally happens in 3 stages:

1) The editor assigned to your lesson will carefully read and try your lesson, providing a first round of feedback that you will be asked to respond to. The purpose of this first round of feedback is to ensure that your lesson addresses the needs of *Programming Historian* readers, and to make sure that the external peer reviewers receive a lesson that works. You will normally be given one month to respond to this first peer review.

2) The editor will then open the lesson for formal peer review. This will include at least two reviewers invited by the editor, and may also include comments from the wider community, who are welcome to contribute views. We generally try to ask reviewers to provide their comments within one month, but sometimes unforeseen circumstances mean this is not possible. The editor should make it clear to you that you should not respond to reviews until after both reviews have been published and the editor has summarised and provided clear instructions for moving forward. In some cases this may be a suggestion to substantially revise or rethink the lesson.  In other cases it will be a matter of making some changes. Depending on the peer review comments, and the nature of issues raised, you may need to revise the tutorial more than once, but the editor will endeavour to ensure that you are given a clear pathway towards publication. You always have the option of withdrawing from the review process if you so choose.

3) Once your editor and peer reviewers are happy with the piece, the editor will recommend publication to the Managing Editor, who will read the piece to ensure that it meets our Author's Guidelines and standards. In some cases there may be additional revisions or copy editing at this stage to bring the  piece in line with our publishing standards. If the Managing Editor is happy with the piece, it will be moved to the live site for publication. Your editor will inform you of any additional information required at this stage.

You may find it helpful to read our [editor guidelines](/editor-guidelines), which detail our editorial process.

If at any point you are unsure of your role or what to do next, post a question to the peer review issue. One of our editors will respond as soon as possible. We endeavour to respond to all queries within a few days.

### Holding Us to Account

Our team of volunteers works hard to provide a rigourous, collegial, and efficient peer review for authors. However, we recognize that there are times when we may fall short of expectations. We want authors to feel empowered to hold us to high standards. If, for whatever reason, you feel that you have been treated unfairly, that you are unhappy or confused by the process, that the review proess has been unnecessarily delayed, that a reviewer has been rude, that your editor has not been responsive enough, or have any other concern, please bring it to our attention so we can address it proactively.

Raising a concern will NOT negatively affect the outcome of your peer review - even a peer review in progress.

To raise a concern, please contact one of the following parties, chosing whomever you feel most comfortable approaching.

* Your assigned editor
* The managing editor
* Our independent ombudsperson, [Amanda Visconti](/project-team)

We hope you don't find yourself in a situation in which you are unhappy, but if you do, we thank you for helping us to improve.

---

This style guide was created with support from the School of Humanities, University of Hertfordshire.
